Index: email_spammer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import random\r\nimport smtplib\r\nimport ssl\r\nimport getpass\r\n\r\nfrom colorama import Fore\r\n\r\na = r\"\"\"___________              .__.__              _________                                           \r\n\\_   _____/ _____ _____  |__|  |            /   _____/__________    _____   _____   ___________  \r\n |    __)_ /     \\\\__  \\ |  |  |    ______  \\_____  \\\\____ \\__  \\  /     \\ /     \\_/ __ \\_  __ \\ \r\n |        \\  Y Y  \\/ __ \\|  |  |__ /_____/  /        \\  |_> > __ \\|  Y Y  \\  Y Y  \\  ___/|  | \\/ \r\n/_______  /__|_|  (____  /__|____/         /_______  /   __(____  /__|_|  /__|_|  /\\___  >__|    \r\n        \\/      \\/     \\/                          \\/|__|       \\/      \\/      \\/     \\/        \"\"\"\r\n\r\nprint(Fore.BLUE + a + Fore.RESET)\r\nprint(f\"By: {Fore.GREEN}@{Fore.RESET}InvisibleCat#00001\")\r\nprint(\"Project page: https://github.com/InvisibleCatA1/Email-Spammer\")\r\n\r\ngood = f\"[{Fore.GREEN}+{Fore.RESET}] \"\r\nerror = f\"[{Fore.RED}E{Fore.RESET}] \"\r\ninfo = f\"[{Fore.BLUE}I{Fore.RESET}] \"\r\nwarn = f\"[{Fore.YELLOW}!{Fore.RESET}] \"\r\nuserinput = f\"[{Fore.CYAN}?{Fore.RESET}] \"\r\n\r\nrandomSubject = False\r\nrandomBody = False\r\n\r\n\r\ndef getUserInputBoolean(question):\r\n    while True:\r\n        answer = input(userinput + question + \" [Y/n]: \")\r\n        if answer.lower() == \"y\":\r\n            return True\r\n        elif answer.lower() == \"n\":\r\n            return False\r\n        else:\r\n            print(\"Please enter 'y' or 'n'\")\r\n\r\n\r\nrun = True\r\n\r\n\r\ndef sendEmail(fromEmail, toEmail, subject, message, server, port, auth=False, username=None, password=None):\r\n    context = ssl.create_default_context()\r\n    with smtplib.SMTP(server, port=port) as server:\r\n        try:\r\n            server.ehlo()\r\n            server.starttls(context=context)\r\n            server.ehlo()\r\n            if auth:\r\n                server.login(username, password)\r\n\r\n            # server.mail(fromEmail)\r\n            # server.rcpt(toEmail)\r\n            # server.data(f\"From: {fromEmail}\\nTo: {toEmail}\\nSubject: {subject}\\n\\n{message}\")\r\n            server.sendmail(fromEmail, toEmail, f\"From: {fromEmail}\\nTo: {toEmail}\\nSubject: {subject}\\n\\n{message}\")\r\n            server.quit()\r\n            print(f\"{good}Email sent to: {toEmail}, From: {fromEmail}\")\r\n        except Exception as e:\r\n            print(f\"{error}{Fore.RED}Error: {Fore.RESET} {e}\")\r\n\r\n\r\n\r\nwhile run:\r\n    print(\"[\" + Fore.BLUE + \"Main\" + Fore.RESET + \"] Menu\")\r\n    print(\"[1] - Send email\")\r\n    print(\"[2] - Spam emails\")\r\n    print(\"[3] - Exit\")\r\n    selection = input(\"> \")\r\n\r\n    match selection:\r\n        case \"1\":\r\n            fromEmail = input(userinput + \"Enter email to send from: \")\r\n            if not fromEmail.__contains__(\"@\"):\r\n                print(f\"{warn}Email \" + fromEmail + \"is not valid\")\r\n                continue\r\n            toEmail = input(userinput + \"Enter the email you want to send to: \")\r\n            if not toEmail.__contains__(\"@\"):\r\n                print(f\"{warn}Email \" + toEmail + \" is not valid\")\r\n                continue\r\n            subject = input(userinput + \"Subject: \")\r\n            message = input(userinput + \"Message: \")\r\n            if getUserInputBoolean(\"Authenticate?\"):\r\n                username = input(userinput + \"Username: \")\r\n                #password = getpass.getpass(userinput + \"Password: \")\r\n                password = input(userinput + \"Password: \")\r\n                sendEmail(fromEmail, toEmail, subject, message, \"smtp.gmail.com\", 587, True, username, password)\r\n            else:\r\n                server = input(userinput + \"Enter the server (blank for default): \")\r\n                if server == \"\":\r\n                    server = random.choice([\"alt1.gmail-smtp-in.l.google.com\", \"alt2.gmail-smtp-in.l.google.com\",\r\n                                            \"alt3.gmail-smtp-in.l.google.com\", \"alt4.gmail-smtp-in.l.google.com\",\r\n                                            \"gmail-smtp-in.l.google.com\"])\r\n                port = input(userinput + \"Enter the port (blank for default): \")\r\n                if port == \"\":\r\n                    port = 25\r\n\r\n                sendEmail(fromEmail, toEmail, subject, message, server, port)\r\n        case \"2\":\r\n            emails = []\r\n            if getUserInputBoolean(\"Use emails from file\"):\r\n                filepath = input(userinput + \"Enter the filepath: \")\r\n                filepath = filepath.replace(\"\\\"\", \"\")\r\n                if not filepath.__contains__(\".txt\"):\r\n                    print(f\"{error}Filepath must end with .txt\")\r\n                    continue\r\n                try:\r\n                    with open(filepath, \"r\") as f:\r\n                        for email in f.readlines():\r\n                            if not email.__contains__(\"@\"):\r\n                                print(f\"{warn}Email \" + email + \" is not valid\")\r\n                            else:\r\n                                emails.append(email.replace(\"\\n\", \"\"))\r\n                except Exception as e:\r\n                    print(error + \"File does not exist\")\r\n                    continue\r\n            else:\r\n                while True:\r\n                    email = input(userinput + \"Enter email: \")\r\n                    if not email.__contains__(\"@\"):\r\n                        print(f\"{error}Email \" + email + \" is not valid\")\r\n                    else:\r\n                        emails.append(email.replace(\"\\n\", \"\"))\r\n                    if not getUserInputBoolean(\"Add another email?\"):\r\n                        break\r\n\r\n            print(\"Emails: \" + Fore.YELLOW + str(emails) + Fore.RESET)\r\n            toEmail = input(userinput + \"Enter the email you want to send to: \")\r\n            if not toEmail.__contains__(\"@\"):\r\n                print(f\"{warn}Email \" + toEmail + \" is not valid\")\r\n                continue\r\n\r\n            subject = input(userinput + \"Subject: \")\r\n            message = input(userinput + \"Message: \")\r\n\r\n            server = input(userinput + \"Enter the server (blank for default): \")\r\n            if server == \"\":\r\n                server = random.choice([\"alt1.gmail-smtp-in.l.google.com\", \"alt2.gmail-smtp-in.l.google.com\",\r\n                                        \"alt3.gmail-smtp-in.l.google.com\", \"alt4.gmail-smtp-in.l.google.com\",\r\n                                        \"gmail-smtp-in.l.google.com\"])\r\n            port = input(userinput + \"Enter the port (blank for default): \")\r\n            if port == \"\":\r\n                port = 25\r\n            for email in emails:\r\n                sendEmail(email, toEmail, subject, message, server, port)\r\n            print(good + \"Emails sent\")\r\n\r\n        case \"3\":\r\n            print(info + \"Exiting...\")\r\n            run = False\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/email_spammer.py b/email_spammer.py
--- a/email_spammer.py	(revision cf4e4a40a51d1e3ac147c83ca927da443d3c5aee)
+++ b/email_spammer.py	(date 1649788277876)
@@ -40,16 +40,13 @@
 run = True
 
 
-def sendEmail(fromEmail, toEmail, subject, message, server, port, auth=False, username=None, password=None):
+def sendEmail(fromEmail, toEmail, subject, message, server, port):
     context = ssl.create_default_context()
     with smtplib.SMTP(server, port=port) as server:
         try:
             server.ehlo()
             server.starttls(context=context)
             server.ehlo()
-            if auth:
-                server.login(username, password)
-
             # server.mail(fromEmail)
             # server.rcpt(toEmail)
             # server.data(f"From: {fromEmail}\nTo: {toEmail}\nSubject: {subject}\n\n{message}")
@@ -81,10 +78,7 @@
             subject = input(userinput + "Subject: ")
             message = input(userinput + "Message: ")
             if getUserInputBoolean("Authenticate?"):
-                username = input(userinput + "Username: ")
-                #password = getpass.getpass(userinput + "Password: ")
-                password = input(userinput + "Password: ")
-                sendEmail(fromEmail, toEmail, subject, message, "smtp.gmail.com", 587, True, username, password)
+
             else:
                 server = input(userinput + "Enter the server (blank for default): ")
                 if server == "":
